"use strict";

const emailAuth=require("emailAuth");
const mailer=require("mailerWrapper").init("cressmc@gmail.com","M4rshM4llowS")
const mongodb=require("mongodb").MongoClient;
const randomstring=require("randomstring");
const cookie_parse=require("cookie");

class MongoUser{
  constructor(company,port,dbUrl,db="app",collection="users"){
    const _this=this;
    this.company=company;
    this.dbUrl=dbUrl;
    const mongodb_path=`mongodb://localhost:${port || 27017}/`;
    mongodb.connect(mongodb_path,{ useNewUrlParser: true },function(err,client){
      const users=client.db(db).collection(collection);
      _this.users=users;
    })
  }
  GET(user,req,res){
    console.log('get mongouser')
    const resp=this.getMethods[req.query["action"]](user,req,res);
    console.log('response:',resp);
    res.send(resp);
  }
  get getMethods(){
    const _this=this;
    return class self{
      static verify(user,req,res){
        // console.log('authToken:',req.query["authToken"])
        _this.users.updateOne({authToken:req.query["authToken"]},{"$set":{verified:true}});
        console.log("account verified!")
        return "Account verified."
      }
      static retrieve(user,req,res){

        if(_this.cookieMatch(user,req)){
          let items={};
          req.query.ask.forEach(function(item){
            items[item]=user.custom[item];
          })
          return items;
        }

      }
    }
  }
  run(req,res){
    const _this=this;
    this.users.find({username:req.query["username"]}).toArray(function(err,user){
      try{
        console.log('foundUser:',user[0])
        _this[req.method](user[0],req,res);
      }catch(err){
        console.log('err:',err)
      }
    })
  }
  POST(user,req,res){
    console.log('post mongouser')
    this.postMethods[req.query.action](user,req,res)
  }
  get postMethods(){
    const _this=this;
    return class self{
      static createAccount(user,req,res){
        //email user special link
        _this.users.find({username:req.query["username"]}).toArray(function(err,items){
          if(items.length<1 && items.length>1){
            res.send("User Exists");
          }else{
            const auth=emailAuth.auth(_this.company,_this.dbUrl,req.query["username"] || req.query["email"],req.query["email"]);
            _this.users.insertOne({
              username:req.query["username"] || req.query["email"],
              email:req.query["email"],
              password:req.query["password"],
              recoveryPassword:false,
              authToken:auth.authToken,
              verified:false,
              smart_cookie:false,
              custom:{}
            })
            mailer.send(_this.company,req.query["email"],auth.signUpSubject,auth.template);
            res.send("User created; email sent.")
          }
        })
      }
      static login(user,req,res){
        if(user.password==req.query["password"]){
          console.log('logged in');
          const smart_cookie=randomstring.generate(24);
          _this.users.updateOne({username:user.username},{"$set":{smart_cookie:smart_cookie}})
          res.set("set-cookie",`smart_cookie=${smart_cookie}`);
          res.send("set new cookie");
          // const parsed_cookie=cookie_parse.parse(req.headers.cookie)
          // if(parsed_cookie.smart_cookie){
          //   if(parsed_cookie.smart_cookie!=user.smart_cookie){
          //     return "Unauthorized request"
          //   }else{
          //     _this.users.updateOne({username:user.username},{"$set":{smart_cookie:smart_cookie}});
          //     res.set("set-cookie",`smart_cookie=${smart_cookie}`);
          //     res.send("reset cookie")
          //   }
          // }else{
          //   _this.users.updateOne({username:user.username},{"$set":{smart_cookie:smart_cookie}})
          //   res.set("set-cookie",`smart_cookie=${smart_cookie}`);
          //   res.send("set new cookie");
          // }

        }else{
          console.log("incorrect username or password");
          res.send("No Access");
        }
      }
      static recover(user,req,res){
        if(req.query.recoverPhase==0){
          const newPassword=randomstring.generate(21)
          _this.users.findOneAndUpdate({username:user.username},{"$set":{recoveryPassword:newPassword}},{upsert:true},function(err,object){
            const auth=emailAuth.auth();
            mailer.send(_this.company,req.query.email,auth.recoverySubject,auth.recoveryTemplate(newPassword));
          })
        }else if(req.query.recoverPhase==1 && req.query.recoveryPassword==user.recoveryPassword){
          _this.users.findOneAndUpdate({username:user.username},{"$set":{password:req.query.newPassword}});
        }
        res.send(null)
      }
      static store(user,req,res){
        if(_this.cookieMatch(user,req)){
          console.log('storing something (:');
          delete req.query.action;
          delete req.query.username;
          const custom=Object.assign(user.custom,req.query);
          console.log('custom:',custom)
          _this.users.updateOne({username:user.username},{"$set":{custom:custom}})
        }
        res.send(null);
      }
    }
  }
  cookieMatch(user,req){
    if(user.smart_cookie==cookie_parse.parse(req.headers.cookie).smart_cookie){
      return true;
    }else{
      return false;
    }
  }
}

const init=(company,port,dbUrl,db,collection)=>{
  return new MongoUser(company,port,dbUrl,db,collection)
}

exports.init=init;
